generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  recipes       Recipe[]
  savedRecipes  SavedRecipe[]
  pantryItems   PantryItem[]
  allergies     Allergy[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Recipe {
  id           String    @id @default(cuid())
  title        String
  description  String?
  image        String?
  cookingTime  Int
  cuisine      String
  ingredients  Ingredient[]
  instructions String[]
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  savedBy      SavedRecipe[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Ingredient {
  id        String   @id @default(cuid())
  name      String
  amount    Float
  unit      String
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model SavedRecipe {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, recipeId])
}

model PantryItem {
  id        String   @id @default(cuid())
  name      String
  amount    Float?
  unit      String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Allergy {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

// NextAuth.js Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
